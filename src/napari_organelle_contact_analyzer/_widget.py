"""
This module contains four napari widgets declared in
different ways:

- a pure Python function flagged with `autogenerate: true`
    in the plugin manifest. Type annotations are used by
    magicgui to generate widgets for each parameter. Best
    suited for simple processing tasks - usually taking
    in and/or returning a layer.
- a `magic_factory` decorated function. The `magic_factory`
    decorator allows us to customize aspects of the resulting
    GUI, including the widgets associated with each parameter.
    Best used when you have a very simple processing task,
    but want some control over the autogenerated widgets. If you
    find yourself needing to define lots of nested functions to achieve
    your functionality, maybe look at the `Container` widget!
- a `magicgui.widgets.Container` subclass. This provides lots
    of flexibility and customization options while still supporting
    `magicgui` widgets and convenience methods for creating widgets
    from type annotations. If you want to customize your widgets and
    connect callbacks, this is the best widget option for you.
- a `QWidget` subclass. This provides maximal flexibility but requires
    full specification of widget layouts, callbacks, events, etc.

References:
- Widget specification: https://napari.org/stable/plugins/guides.html?#widgets
- magicgui docs: https://pyapp-kit.github.io/magicgui/

Replace code below according to your needs.
"""

from typing import TYPE_CHECKING
import napari
from magicgui import magic_factory
from magicgui.widgets import CheckBox, Container, create_widget
from qtpy.QtCore import Qt
from qtpy.QtWidgets import QVBoxLayout, QHBoxLayout, QPushButton, QWidget, QLabel, QSlider
from skimage import filters, morphology, measure
from skimage.util import img_as_float
from scipy.ndimage import distance_transform_edt
import numpy as np

if TYPE_CHECKING:
    import napari

class OrganelleContactWidget(QWidget):
    def __init__(self, viewer: napari.Viewer):
        super().__init__()

        self.viewer = viewer
        # default threshold value
        self.threshold = 10

        # now we'll create the slider
        self.slider = QSlider(Qt.Horizontal)
        self.slider.setMinimum(1)
        self.slider.setMaximum(100)
        self.slider.setValue(self.threshold)
        self.slider.valueChanged.connect(self.update_threshold)

        self.label = QLabel(f"Contact Threshold (pixels): {self.threshold}")
        self.label.setAlignment(Qt.AlignCenter)

        self.result_label = QLabel("Number of Contacts: N/A\nOverlap Metric: N/A")
        self.result_label.setAlignment(Qt.AlignCenter)

        # here's more on the layout for the widget
        layout = QVBoxLayout()
        layout.addWidget(self.label)
        layout.addWidget(self.slider)
        layout.addWidget(self.result_label)
        self.setLayout(layout)

    def update_threshold(self, value):
        self.threshold = value
        self.label.setText(f"Contact Threshold (pixels): {self.threshold}")
        self.analyze_contacts()

        # this conditional isn't too relevant here
        # if len(self.viewer.layers) > 0:
        #     self.analyze_contacts()

    def analyze_contacts(self):
        # quick conditional to make sure that at least two signals are present
        if len(self.viewer.layers) < 2:
            print('load two signals prior to analysis')
            return

        signal1 = self.viewer.layers[0].data
        signal2 = self.viewer.layers[1].data

        if signal1.shape != signal2.shape:
            print('input layers should be of the same dimensions. please fix.')
            return      # just allows you to continue after the conditional

        # binary threshholding --> should we do this in a different widget? is it even needed?

        mask1 = signal1 > filters.threshold_otsu(signal1)
        mask2 = signal2 > filters.threshold_otsu(signal2)

        # Calculate distance transform
        dist1 = distance_transform_edt(~mask1)
        dist2 = distance_transform_edt(~mask2)

        # Identify contacts based on threshold
        contacts = (dist1 < self.threshold) & mask2 | (dist2 < self.threshold) & mask1
        contact_count = np.sum(contacts)

        # Calculate overlap metric (Jaccard index)
        intersection = np.logical_and(mask1, mask2).sum()
        union = np.logical_or(mask1, mask2).sum()
        overlap_metric = intersection / union if union > 0 else 0

        # Update result label
        self.result_label.setText(
            f"Number of Contacts: {contact_count}\nOverlap Metric: {overlap_metric:.4f}"
        )
        # contact_area = np.logical_and(signal1 > 0, signal2 > 0)
        # contact_pixels = np.sum(contact_area)

        # if contact_pixels >= self.threshold:
        #     print
        # # here's where we implement the jaccard index, well sort of


# Uses the `autogenerate: true` flag in the plugin manifest
# to indicate it should be wrapped as a magicgui to autogenerate
# a widget.
def threshold_autogenerate_widget(
    img: "napari.types.ImageData",
    threshold: "float",
) -> "napari.types.LabelsData":
    return img_as_float(img) > threshold


# the magic_factory decorator lets us customize aspects of our widget
# we specify a widget type for the threshold parameter
# and use auto_call=True so the function is called whenever
# the value of a parameter changes
@magic_factory(
    threshold={"widget_type": "FloatSlider", "max": 1}, auto_call=True
)
def threshold_magic_widget(
    img_layer: "napari.layers.Image", threshold: "float"
) -> "napari.types.LabelsData":
    return img_as_float(img_layer.data) > threshold


# if we want even more control over our widget, we can use
# magicgui `Container`
class ImageThreshold(Container):
    def __init__(self, viewer: "napari.viewer.Viewer"):
        super().__init__()
        self._viewer = viewer
        # use create_widget to generate widgets from type annotations
        self._image_layer_combo = create_widget(
            label="Image", annotation="napari.layers.Image"
        )
        self._threshold_slider = create_widget(
            label="Threshold", annotation=float, widget_type="FloatSlider"
        )
        self._threshold_slider.min = 0
        self._threshold_slider.max = 1
        # use magicgui widgets directly
        self._invert_checkbox = CheckBox(text="Keep pixels below threshold")

        # connect your own callbacks
        self._threshold_slider.changed.connect(self._threshold_im)
        self._invert_checkbox.changed.connect(self._threshold_im)

        # append into/extend the container with your widgets
        self.extend(
            [
                self._image_layer_combo,
                self._threshold_slider,
                self._invert_checkbox,
            ]
        )

    def _threshold_im(self):
        image_layer = self._image_layer_combo.value
        if image_layer is None:
            return

        image = img_as_float(image_layer.data)
        name = image_layer.name + "_thresholded"
        threshold = self._threshold_slider.value
        if self._invert_checkbox.value:
            thresholded = image < threshold
        else:
            thresholded = image > threshold
        if name in self._viewer.layers:
            self._viewer.layers[name].data = thresholded
        else:
            self._viewer.add_labels(thresholded, name=name)


class ExampleQWidget(QWidget):
    # your QWidget.__init__ can optionally request the napari viewer instance
    # use a type annotation of 'napari.viewer.Viewer' for any parameter
    def __init__(self, viewer: "napari.viewer.Viewer"):
        super().__init__()
        self.viewer = viewer

        btn = QPushButton("Click me!")
        btn.clicked.connect(self._on_click)

        self.setLayout(QHBoxLayout())
        self.layout().addWidget(btn)

    def _on_click(self):
        print("napari has", len(self.viewer.layers), "layers")
